#!/usr/bin/env node

const path = require('path')
const child = require('child_process')

const strip = str => str.replace(/\x1B[[(?);]{0,2}(;?\d)*./g, '')

const ledInit = [
  [0x00, 0x55],   // RSTDIR
  [0x07, 0x00],   // Disable all leds
  [0x08, 0x08],   // SYNC/PWMLOG, TRUE COLOR
  [0x10, 0x60],   // ILED1_1
  [0x11, 0x60],   // ILED2_1
  [0x12, 0xA0],   // ILED3_1
  [0x13, 0xFF],   // ILED1_2
  [0x14, 0x00],   // ILED2_2
  [0x15, 0x00],   // ILED3_2
  [0x16, 0x00],   // ILED1_3
  [0x17, 0xFF],   // ILED2_3
  [0x18, 0x00],   // ILED3_3
  [0x19, 0x00],   // ILED1_4
  [0x1A, 0x00],   // ILED2_4
  [0x1B, 0xFF],   // ILED3_4
  [0x1C, 0x60],   // PWM1
  [0x1D, 0x40],   // PWM2
  [0x1E, 0xA0],   // PWM3
]

const ledEncode = (mode, colors) => {
  let arr = []
  arr.push([0x07, 0x00])
  if (mode === 'on') {
    arr.push([0x04, 0x00])
    arr.push([0x05, 0x00])
    arr.push([0x06, 0x00])

    let color = colors[0]
    if (color === 'green') {
      arr.push([0x07, 0x01])
    } else if (color === 'blue') {
      arr.push([0x07, 0x02])
    } else if (color === 'red') {
      arr.push([0x07, 0x04])
    } else if (color === 'white') {
      arr.push([0x07, 0x07])
    } 
  } else {
    arr.push([0x04, 0x01])
    arr.push([0x05, 0x01])
    arr.push([0x06, 0x01])
    switch (mode) {
      case 'blink':
        arr.push([0x30, 0x22])
        arr.push([0x31, 0x21])
        break
      case 'pulse':
        arr.push([0x30, 0x10])
        arr.push([0x31, 0x18])
        break
      case 'breathing':
        arr.push([0x30, 0x80])
        arr.push([0x31, 0x86])
        break
      default:
        break
    }

    let b = 0
    colors.forEach(color => {
      switch (color) {
        case 'green':
          b |= 0x02
          break
        case 'blue':
          b |= 0x04
          break
        case 'red':
          b |= 0x08
          break
        case 'white':
          b |= 0x01
          break
        default:
          break
      }
    })
    arr.push([0x33, b])
    arr.push([0x07, 0x07])
  }
  return arr
}

const i2csetAsync = async (addr, val) => 
  new Promise((resolve, reject) => {
    let a = addr.toString(16).padStart(2, '0')
    let v = val.toString(16).padStart(2, '0')
    child.exec(`i2cset -y 1 0x64 0x${a} 0x${v}`, err => 
      err ? reject(err) : resolve(null))
  })

const ledWriteAsync = async arr => {
  for (let i = 0; i < arr.length; i++) {
    let [addr, val] = arr[i]
    // await i2csetAsync(addr, val)
  await new Promise((resolve, reject) => {
    let a = addr.toString(16).padStart(2, '0')
    let v = val.toString(16).padStart(2, '0')
    child.exec(`i2cset -y 1 0x64 0x${a} 0x${v}`, err => 
      err ? reject(err) : resolve(null))
  })

  }
}

const readSerialAsync = async () => 
  new Promise((resolve, reject) =>
    child.exec('atecc -b 1 -c serial', (err, stdout) => {
      if (err) {
        reject(err)
      } else {
        let serial = stdout.toString().trim() 
        if (/^0123[0-9a-f]{12}ee$/.test(serial)) {
          resolve(serial)
        } else {
          err = new Error(`bad serial ${serial}`)
          reject(err) 
        }
      }
    }))

const readSdaAsync = async () => 
  new Promise((resolve, reject) =>
    child.exec('dd if=/dev/sda of=/dev/null bs=64M count=1', (err, stdout, stderr) => {
      if (err) {
        reject(err)
      } else {
        resolve(stderr.toString().trim().split('\n').pop())
      }
    }))

// return first found device addr or empty string
const blueScanAsync = async (sec) =>
  new Promise((resolve, reject) => {
    const regex = /[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}/
    let addr = ''

    const bt = child.spawn('bluetoothctl')
    bt.stdout.on('data',  data => {
      let line = strip(data.toString()).trim() 
      // [NEW] Device 7E:01:F3:C6:71:CC 
      if (line.startsWith('[NEW] Device ') && regex.test(line.slice(13, 30))) {
        addr = line.slice(13, 30)
        bt.stdin.write('quit\n')
      }
    }) 

    const timer = setTimeout(() => bt.stdin.write('quit\n'), sec * 1000)

    bt.on('error', err => {
      bt.removeAllListeners('close')
      bt.removeAllListeners('error')
      bt.on('error', () => {})
      bt.kill()
      clearTimeout(timer)
      reject(err)
    })

    bt.on('close', (code, signal) => {
      clearTimeout(timer)
      if (code || signal) {
        let err = new Error(`unexpected close with code ${code}, signal ${signal}`)
        reject(err)        
      } else {
        resolve(addr)
      }
    })

    bt.stdin.write('scan on\n')
  })

const delayAsync = async sec =>
  new Promise((resolve, reject) => 
    setTimeout(() => resolve(), sec * 1000)) 

// return access points name list (may be empty)
const wifiListAsync = async () => 
  new Promise((resolve, reject) => {
    child.exec('nmcli d wifi list', (err, stdout) => {
      if (err) {
        reject(err)
      } else {
        const list = stdout
          .toString()
          .split('\n')
          .slice(1)
          .map(l => l.slice(2).trim().split(' ')[0])
          .filter(l => l.length)
        resolve(list)
      }
    })
  })

;(async () => {
  console.time('total')
  await ledWriteAsync(ledInit)
  await ledWriteAsync(ledEncode('blink', ['green']))

  try {
    let serial = await readSerialAsync()
    console.log('serial:', serial)
  } catch (e) {
    console.log('ecc error', err.message)
    await ledWriteAsync(ledEncode('on', ['red']))
    process.exit(1)
  }

  try {
    let out = await readSdaAsync()  
    console.log(`sata test passed, ${out}`)
  } catch (e) {
    console.log('sata test failed', err.message)
    await ledWriteAsync(ledEncode('breathing', ['red']))
    process.exit(2)
  }

  try {
    let dev = await blueScanAsync(10)
    if (dev) {
      console.log(`blue scan found device ${dev}`)
    } else {
      console.log('blue scan found no device')
      await ledWriteAsync(ledEncode('blink', ['red']))
      process.exit(3)
    }
  } catch (e) {
    console.log('blue scan failed', e.message)
    await ledWriteAsync(ledEncode('blink', ['red']))
    process.exit(4)
  }

  try {
    let list = await wifiListAsync()
    if (list.length) {
      console.log(`wifi scan found ${list.length} access points: ${list.join(', ')}`)
    } else {
      console.log('wifi scan found no access point')
      await ledWriteAsync(ledEncode('pulse', ['red'])) 
    }
  } catch (e) {
    console.log('wifi scan failed', e.message)
    await ledWriteAsync(ledEncode('pulse', ['red']))
    process.exit(6)
  }

  await ledWriteAsync(ledEncode('blink', ['green', 'blue', 'red', 'white']))
  console.timeEnd('total') 
  process.exit(0) 
})().then(() => {})


